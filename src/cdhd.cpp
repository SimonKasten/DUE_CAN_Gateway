#include "cdhd.h"

CDHD_Drive::CDHD_Drive(uint32_t _id){
    this->id = _id;

    this->init_Msg.id = 0x0;
    this->init_Msg.length = 2;

    this->r1.id = 0x200 + _id;
    this->r1.length = 8;
    this->r2.id = 0x300 + _id;
    this->r2.length = 8;
    this->r3.id = 0x400 + _id;
    this->r3.length = 8;
    this->r4.id = 0x500 + _id;
    this->r4.length = 8;
}

CDHD_Drive::~CDHD_Drive(){
}


void CDHD_Drive::update_tpdos(CAN_FRAME &f){
    int tpdo_id = f.id - this->id;
    if (tpdo_id == 0x180){
        tpdo1.statusword = f.data.uint16[0];
        tpdo1.opmode_display = f.data.int8[2];

        tpdo1.ist_torq = int16_t( f.data.byte[3] | f.data.byte[4] << 8 );
    }
    else if (tpdo_id == 0x280){
        tpdo2.ist_pos = f.data.int32[0];
        tpdo2.ist_rpm = f.data.int32[1];
    }
    else if (tpdo_id == 0x380){
        tpdo3.ist_curr = f.data.int16[0];
        tpdo3.soll_torq = f.data.int16[1];
        tpdo3.analog1 = f.data.int16[2];
        tpdo3.analog2 = f.data.int16[3];
    }
    else if (tpdo_id == 0x480){
        tpdo4.dig_in = f.data.uint32[0];
        tpdo4.pos_ext = f.data.int32[1];
    }
}

void CDHD_Drive::update_rpdos(){
    this->r1.data.uint16[0] = this->rpdo1.controlword;
    this->r1.data.int8[2] = this->rpdo1.opmode;

    this->r2.data.int32[0] = this->rpdo2.target_position;
    this->r2.data.int32[1] = this->rpdo2.profile_velocity;

    this->r3.data.int32[0] = this->rpdo3.target_velocity;
    
    this->r4.data.int16[0] = this->rpdo4.target_torque;
}

void CDHD_Drive::send_rpdos(){
    Can0.sendFrame(this->r1);
    Can0.sendFrame(this->r2);
    Can0.sendFrame(this->r3);
    Can0.sendFrame(this->r4);
}




void CDHD_Drive::set_nmt_state(uint16_t state)
{
    init_Msg.data.bytes[0] = state;
    init_Msg.data.bytes[1] = this->id;

    Can0.sendFrame(init_Msg);
}

void CDHD_Drive::update_nmt_state(CAN_FRAME &f)
{
    this->state = f.data.bytes[0];
}


void CDHD_Drive::relais()
{
    
    sendPDO(0x203, 4, 0x00000000, 0x0); // relais schließen K1
    sendPDO(0x203, 4, 0x00000100, 0x0);
    sendPDO(0x203, 4, 0x00000500, 0x0);


}


bool CDHD_Drive::fetch_state(){
    // looks if statusword n opmode are set
    if( this->tpdo1.statusword != this->rpdo1.controlword ){    
        Can0.sendFrame(this->r1);
        return false;
    }
    if( this->tpdo1.opmode_display != this->rpdo1.opmode ){
        Can0.sendFrame(this->r1);
        return false;
    }
    return true;
}




void CDHD_Drive::quit()
{

    sendPDO(0x202, 0x3, 0x000080, 0x0);
    // // heartbeat();
}

void CDHD_Drive::positionMode(int32_t sollPosition, int32_t maxPosDrehzahl)
{

    sendPDO(0x202, 0x3, 0x010000, 0x0);
    // heartbeat();
    sendPDO(0x202, 0x3, 0x010006, 0x0);
    // heartbeat();
    sendPDO(0x202, 0x3, 0x010007, 0x0);
    // heartbeat();
    sendPDO(0x202, 0x3, 0x01000F, 0x0);
    // heartbeat();

    sendPDO(0x302, 0x8, sollPosition * int32_t(const_scale_num), maxPosDrehzahl * int32_t(const_scale_velo));

    sendPDO(0x202, 0x3, 0x01003F, 0x0);
    // heartbeat();
}
void CDHD_Drive::solldrehmoment(int32_t sollTorque)
{
    sendPDO(0x502, 0x8, sollTorque, 0x0);
    // heartbeat();
}
void CDHD_Drive::torqueMode(int32_t sollTorque, int32_t maxDrehzahl)
{
    sendPDO(0x202, 0x3, 0x040000, 0x0);
    // heartbeat();
    sendPDO(0x202, 0x3, 0x040006, 0x0);
    // heartbeat();
    sendPDO(0x202, 0x3, 0x040007, 0x0);
    // heartbeat();

    sendPDO(0x502, 0x8, sollTorque, 0x0);
    // heartbeat();

    sendPDO(0x202, 0x3, 0x04000F, 0x0);
    // heartbeat();
}
void CDHD_Drive::solldrehzahl(int32_t sollDrehzahl)
{
    sendPDO(0x402, 0x8, sollDrehzahl * int32_t(const_scale_velo), 0x0);
    // heartbeat();
}
void CDHD_Drive::drehzahlMode(int32_t sollDrehzahl, int32_t maxTorque)
{



    sendPDO(0x202, 0x3, 0x030000, 0x0);
    // heartbeat();
    sendPDO(0x202, 0x3, 0x030006, 0x0);
    // heartbeat();
    sendPDO(0x202, 0x3, 0x030007, 0x0);
    // heartbeat();

    sendPDO(0x402, 0x8, sollDrehzahl * int32_t(const_scale_velo), 0x0);
    // heartbeat();

    sendPDO(0x202, 0x3, 0x03000F, 0x0);
    // heartbeat();
}

void CDHD_Drive::motorstop()
{
    Serial.println("Motor Stop");
    sendPDO(0x402, 0x8, 0x0, 0x0);
    // heartbeat();
    sendPDO(0x202, 0x3, 0x000006, 0x0);
    // heartbeat();
    sendPDO(0x202, 0x3, 0x000000, 0x0);
    // heartbeat();
}


void CDHD_Drive::sendSDO(uint32_t s_id, uint32_t s_cb, uint32_t s_od, uint32_t s_sub, uint32_t s_data)
{
    send_Msg.id = s_id;
    send_Msg.length = 8;
    // Command Byte
    send_Msg.data.bytes[0] = s_cb;
    // OB-Index
    send_Msg.data.bytes[1] = (s_od & 0x00FF);
    send_Msg.data.bytes[2] = (s_od & 0xFF00) >> 8;
    // Sub-Index
    send_Msg.data.bytes[3] = s_sub;
    // Data
    send_Msg.data.bytes[4] = (s_data & 0x000000FF);
    send_Msg.data.bytes[5] = (s_data & 0x0000FF00) >> 8;
    send_Msg.data.bytes[6] = (s_data & 0x00FF0000) >> 16;
    send_Msg.data.bytes[7] = (s_data & 0xFF000000) >> 24;

    Can0.sendFrame(send_Msg);
    delay(5);
}

void CDHD_Drive::sendPDO(uint32_t s_id, uint32_t s_dlc, uint32_t s_data1, uint32_t s_data2)
{
    send_Msg.id = s_id;
    send_Msg.length = s_dlc;
    // Data

    send_Msg.data.bytes[0] = (s_data1 & 0x000000FF);
    send_Msg.data.bytes[1] = (s_data1 & 0x0000FF00) >> 8;
    send_Msg.data.bytes[2] = (s_data1 & 0x00FF0000) >> 16;
    send_Msg.data.bytes[3] = (s_data1 & 0xFF000000) >> 24;

    send_Msg.data.bytes[4] = (s_data2 & 0x000000FF);
    send_Msg.data.bytes[5] = (s_data2 & 0x0000FF00) >> 8;
    send_Msg.data.bytes[6] = (s_data2 & 0x00FF0000) >> 16;
    send_Msg.data.bytes[7] = (s_data2 & 0xFF000000) >> 24;

    Can0.sendFrame(send_Msg);
    delay(5);
}

void CDHD_Drive::recievePDO(CAN_FRAME &frame)
{
    Serial.print("PDO ");
    sprintf(buff, "%03X", (unsigned int) frame.id);
    Serial.print(buff); // print ID
    Serial.print(" | ");
    Serial.print(frame.length, HEX); // print DLC
    Serial.print(" | ");

    for (int i = frame.length - 1; i >= 0; i--)
    { // print the data
        sprintf(buff, "%02X", (unsigned int) frame.data.bytes[i]);
        Serial.print(buff);
        Serial.print(" ");
    }

    Serial.print("\n");
}

void CDHD_Drive::recieveSDO(CAN_FRAME &frame)
{
    Serial.print("SDO ");
    Serial.print(frame.id, HEX); // print ID
    Serial.print(" | ");
    Serial.print(frame.length, HEX); // print DLC
    Serial.print(" | (");

    int commandbyte = 0;
    commandbyte = frame.data.bytes[0];
    sprintf(buff, "%02x",(unsigned int) commandbyte);
    Serial.print(buff);
    Serial.print("|");

    int obj_index = 0;
    obj_index = frame.data.bytes[1] + frame.data.bytes[2] * 256;
    sprintf(buff, "%04X",(unsigned int) obj_index);
    Serial.print(buff);
    Serial.print("h:");

    int sub_index = 0;
    sub_index = frame.data.bytes[3];
    sprintf(buff, "%02X",(unsigned int) sub_index);
    Serial.print(buff);
    Serial.print("h) | ");

    if (obj_index == 0x603f)
        Serial.println("ERROR");

    uint32_t m_data = 0;
    uint32_t mbuf;
    mbuf = frame.data.bytes[4];
    m_data = frame.data.bytes[4];
    mbuf = frame.data.bytes[5];
    m_data |= mbuf << 8;
    mbuf = frame.data.bytes[6];
    m_data |= mbuf << 16;
    mbuf = frame.data.bytes[7];
    m_data |= mbuf << 24;

    sprintf(buff, "%08X",(unsigned int) m_data);
    Serial.print(buff);

    Serial.print("\n");
}



void CDHD_Drive::sdoInit()
{
  sendSDO(0x601, 0x40, 0x1000, 0x00, 0x00000000); //  1000h – Device Type
  sendSDO(0x601, 0x23, 0x1005, 0x00, 0x80000080); //  1005h – COB-ID SYNC Message
  sendSDO(0x601, 0x23, 0x1007, 0x00, 0x00002710); //  1007h – Synchronous Window Length
  sendSDO(0x601, 0x23, 0x1014, 0x00, 0x80000081); //  1014h – COB-ID EMCY
  sendSDO(0x601, 0x23, 0x1014, 0x00, 0x00000081); //
  sendSDO(0x601, 0x23, 0x1400, 0x01, 0x80000201); //  1400h – Receive PDO Communication Parameter 1
  sendSDO(0x601, 0x23, 0x1400, 0x01, 0x00000201); //
  sendSDO(0x601, 0x2f, 0x1400, 0x02, 0x00000001); //
  sendSDO(0x601, 0x23, 0x1401, 0x01, 0x80000301); //  1401h – Receive PDO Communication Parameter 2
  sendSDO(0x601, 0x23, 0x1401, 0x01, 0x00000301); //
  sendSDO(0x601, 0x23, 0x1402, 0x01, 0x80000401); //  1402h – Receive PDO Communication Parameter 3
  sendSDO(0x601, 0x23, 0x1402, 0x01, 0x00000401); //
  sendSDO(0x601, 0x23, 0x1403, 0x01, 0x80000501); //  1403h – Receive PDO Communication Parameter 4
  sendSDO(0x601, 0x23, 0x1403, 0x01, 0x00000501); //
  sendSDO(0x601, 0x2f, 0x1600, 0x00, 0x00000000); //  1600h – Receive PDO Mapping Parameter 1
  sendSDO(0x601, 0x2f, 0x1600, 0x00, 0x00000002); //
  sendSDO(0x601, 0x2f, 0x1601, 0x00, 0x00000000); //
  sendSDO(0x601, 0x2f, 0x1601, 0x00, 0x00000002); //
  sendSDO(0x601, 0x2f, 0x1602, 0x00, 0x00000000); //
  sendSDO(0x601, 0x2f, 0x1602, 0x00, 0x00000002); //
  sendSDO(0x601, 0x2f, 0x1603, 0x00, 0x00000000); //
  sendSDO(0x601, 0x2f, 0x1603, 0x00, 0x00000002); //
  sendSDO(0x601, 0x23, 0x1800, 0x01, 0x80000181); //  1800h – Transmit PDO Communication Parameter 1
  sendSDO(0x601, 0x23, 0x1800, 0x01, 0x00000181); //
  sendSDO(0x601, 0x23, 0x1801, 0x01, 0x80000281); //
  sendSDO(0x601, 0x23, 0x1801, 0x01, 0x00000281); //
  sendSDO(0x601, 0x23, 0x1802, 0x01, 0x80000381); //
  sendSDO(0x601, 0x23, 0x1802, 0x01, 0x00000381); //
  sendSDO(0x601, 0x23, 0x1803, 0x01, 0x80000481); //
  sendSDO(0x601, 0x23, 0x1803, 0x01, 0x00000481); //
  sendSDO(0x601, 0x2f, 0x1A00, 0x00, 0x00000000); //  1A00h – Transmit PDO Mapping Parameter 1
  sendSDO(0x601, 0x2f, 0x1A00, 0x00, 0x00000003); //
  sendSDO(0x601, 0x2f, 0x1A01, 0x00, 0x00000000); //
  sendSDO(0x601, 0x2f, 0x1A01, 0x00, 0x00000002); //
  sendSDO(0x601, 0x2f, 0x1A03, 0x00, 0x00000000); //
  sendSDO(0x601, 0x2f, 0x1A03, 0x00, 0x00000002);
  sendSDO(0x602, 0x40, 0x1000, 0x00, 0x00000000); //
  sendSDO(0x602, 0x23, 0x1005, 0x00, 0x80000080); //
  sendSDO(0x602, 0x23, 0x1007, 0x00, 0x00002710); //
  sendSDO(0x602, 0x23, 0x1014, 0x00, 0x80000082); //
  sendSDO(0x602, 0x23, 0x1014, 0x00, 0x00000082); //
  sendSDO(0x602, 0x23, 0x1400, 0x01, 0x80000202); //
  sendSDO(0x602, 0x23, 0x1400, 0x01, 0x00000202); //
  sendSDO(0x602, 0x2f, 0x1400, 0x02, 0x00000001); //
  sendSDO(0x602, 0x23, 0x1401, 0x01, 0x80000302); //
  sendSDO(0x602, 0x23, 0x1401, 0x01, 0x00000302); //
  sendSDO(0x602, 0x23, 0x1402, 0x01, 0x80000402); //
  sendSDO(0x602, 0x23, 0x1402, 0x01, 0x00000402); //
  sendSDO(0x602, 0x23, 0x1403, 0x01, 0x80000502); //
  sendSDO(0x602, 0x23, 0x1403, 0x01, 0x00000502); //
  sendSDO(0x602, 0x2f, 0x1600, 0x00, 0x00000000); //
  sendSDO(0x602, 0x2f, 0x1600, 0x00, 0x00000002); //
  sendSDO(0x602, 0x2f, 0x1601, 0x00, 0x00000000); //
  sendSDO(0x602, 0x2f, 0x1601, 0x00, 0x00000002); //
  sendSDO(0x602, 0x2f, 0x1602, 0x00, 0x00000000); //
  sendSDO(0x602, 0x2f, 0x1602, 0x00, 0x00000002); //
  sendSDO(0x602, 0x2f, 0x1603, 0x00, 0x00000000); //
  sendSDO(0x602, 0x2f, 0x1603, 0x00, 0x00000002); //
  sendSDO(0x602, 0x23, 0x1800, 0x01, 0x80000182); //
  sendSDO(0x602, 0x23, 0x1800, 0x01, 0x00000182); //
  sendSDO(0x602, 0x23, 0x1801, 0x01, 0x80000282); //
  sendSDO(0x602, 0x23, 0x1801, 0x01, 0x00000282); //
  sendSDO(0x602, 0x23, 0x1802, 0x01, 0x80000382); //
  sendSDO(0x602, 0x23, 0x1802, 0x01, 0x00000382); //
  sendSDO(0x602, 0x23, 0x1803, 0x01, 0x80000482); //
  sendSDO(0x602, 0x23, 0x1803, 0x01, 0x00000482); //
  sendSDO(0x602, 0x2f, 0x1A00, 0x00, 0x00000000); //
  sendSDO(0x602, 0x2f, 0x1A00, 0x00, 0x00000003); //
  sendSDO(0x602, 0x2f, 0x1A01, 0x00, 0x00000000); //
  sendSDO(0x602, 0x2f, 0x1A01, 0x00, 0x00000002); //
  sendSDO(0x602, 0x2f, 0x1A03, 0x00, 0x00000000); //
  sendSDO(0x602, 0x2f, 0x1A03, 0x00, 0x00000002); //

  sendSDO(0x603, 0x40, 0x1000, 0x00, 0x00000000); //
  sendSDO(0x603, 0x23, 0x1005, 0x00, 0x80000080); //
  sendSDO(0x603, 0x23, 0x1014, 0x00, 0x80000083); //
  sendSDO(0x603, 0x23, 0x1014, 0x00, 0x00000083); //
  sendSDO(0x603, 0x23, 0x1400, 0x01, 0x80000203); //
  sendSDO(0x603, 0x23, 0x1400, 0x01, 0x00000203); //
  sendSDO(0x603, 0x2f, 0x1400, 0x02, 0x00000001); //
  sendSDO(0x603, 0x23, 0x1401, 0x01, 0x80000303); //
  sendSDO(0x603, 0x23, 0x1401, 0x01, 0x00000303); //
  sendSDO(0x603, 0x2f, 0x1401, 0x02, 0x00000001); //
  sendSDO(0x603, 0x23, 0x1402, 0x01, 0x80000403); //
  sendSDO(0x603, 0x23, 0x1403, 0x01, 0x80000503); //
  sendSDO(0x603, 0x2f, 0x1600, 0x00, 0x00000000); //
  sendSDO(0x603, 0x2f, 0x1600, 0x00, 0x00000004); //
  sendSDO(0x603, 0x2f, 0x1601, 0x00, 0x00000000); //
  sendSDO(0x603, 0x2f, 0x1601, 0x00, 0x00000004); //
  sendSDO(0x603, 0x23, 0x1800, 0x01, 0x80000183); //
  sendSDO(0x603, 0x23, 0x1800, 0x01, 0x00000183); //
  sendSDO(0x603, 0x2f, 0x1800, 0x02, 0x00000001); //
  sendSDO(0x603, 0x23, 0x1801, 0x01, 0x80000283); //
  sendSDO(0x603, 0x23, 0x1801, 0x01, 0x00000283); //
  sendSDO(0x603, 0x2f, 0x1801, 0x02, 0x00000001); //
  sendSDO(0x603, 0x23, 0x1802, 0x01, 0x80000383); //
  sendSDO(0x603, 0x23, 0x1803, 0x01, 0x80000483); //
  sendSDO(0x603, 0x2f, 0x1A00, 0x00, 0x00000000); //
  sendSDO(0x603, 0x2f, 0x1A00, 0x00, 0x00000004); //
  sendSDO(0x603, 0x2f, 0x1A01, 0x00, 0x00000000); //
  sendSDO(0x603, 0x2f, 0x1A01, 0x00, 0x00000004); //

  sendSDO(0x603, 0x2b, 0x5010, 0x01, 0x00000005); //
  sendSDO(0x603, 0x2b, 0x5010, 0x02, 0x00000005); //
  sendSDO(0x603, 0x2b, 0x5010, 0x03, 0x00000005); //
  sendSDO(0x603, 0x2b, 0x5010, 0x04, 0x00000005); //
  sendSDO(0x603, 0x2b, 0x5011, 0x01, 0x00000033); //
  sendSDO(0x603, 0x2b, 0x5011, 0x02, 0x00000033); //
  sendSDO(0x603, 0x2b, 0x5011, 0x03, 0x00000033); //
  sendSDO(0x603, 0x2b, 0x5011, 0x04, 0x00000033); //
  sendSDO(0x603, 0x2b, 0x5012, 0x01, 0x00000FA0); //
  sendSDO(0x603, 0x2b, 0x5012, 0x02, 0x00000FA0); //
  sendSDO(0x603, 0x2b, 0x5012, 0x03, 0x00000FA0); //
  sendSDO(0x603, 0x2b, 0x5012, 0x04, 0x00000FA0); //
  sendSDO(0x603, 0x2b, 0x5013, 0x01, 0x00000FA0); //
  sendSDO(0x603, 0x2b, 0x5013, 0x02, 0x00000FA0); //
  sendSDO(0x603, 0x2b, 0x5013, 0x03, 0x00000FA0); //
  sendSDO(0x603, 0x2b, 0x5013, 0x04, 0x00000FA0); //
  sendSDO(0x603, 0x2f, 0x6423, 0x00, 0x00000001); //

  /*
sendSDO( 0x604 , 0x40  , 0x1000  , 0x00  , 0x00000000  );  //
sendSDO(  0x604 , 0x23  , 0x1005  , 0x00  , 0x80000080  );  //
sendSDO(  0x604 , 0x23  , 0x1014  , 0x00  , 0x80000084  );  //
sendSDO(  0x604 , 0x23  , 0x1014  , 0x00  , 0x00000084  );  //
sendSDO(  0x604 , 0x23  , 0x1400  , 0x01  , 0x80000204  );  //
sendSDO(  0x604 , 0x23  , 0x1400  , 0x01  , 0x00000204  );  //
sendSDO(  0x604 , 0x2f  , 0x1400  , 0x02  , 0x00000001  );  //
sendSDO(  0x604 , 0x23  , 0x1401  , 0x01  , 0x80000304  );  //
sendSDO(  0x604 , 0x23  , 0x1401  , 0x01  , 0x00000304  );  //
sendSDO(  0x604 , 0x2f  , 0x1401  , 0x02  , 0x00000001  );  //
sendSDO(  0x604 , 0x23  , 0x1402  , 0x01  , 0x80000404  );  //
sendSDO(  0x604 , 0x23  , 0x1403  , 0x01  , 0x80000504  );  //
sendSDO(  0x604 , 0x2f  , 0x1600  , 0x00  , 0x00000000  );  //
sendSDO(  0x604 , 0x2f  , 0x1600  , 0x00  , 0x00000004  );  //
sendSDO(  0x604 , 0x2f  , 0x1601  , 0x00  , 0x00000000  );  //
sendSDO(  0x604 , 0x2f  , 0x1601  , 0x00  , 0x00000004  );  //
sendSDO(  0x604 , 0x23  , 0x1800  , 0x01  , 0x80000184  );  //
sendSDO(  0x604 , 0x23  , 0x1800  , 0x01  , 0x00000184  );  //
sendSDO(  0x604 , 0x2f  , 0x1800  , 0x02  , 0x00000001  );  //
sendSDO(  0x604 , 0x23  , 0x1801  , 0x01  , 0x80000284  );  //
sendSDO(  0x604 , 0x23  , 0x1801  , 0x01  , 0x00000284  );  //
sendSDO(  0x604 , 0x2f  , 0x1801  , 0x02  , 0x00000001  );  //
sendSDO(  0x604 , 0x23  , 0x1802  , 0x01  , 0x80000384  );  //
sendSDO(  0x604 , 0x23  , 0x1803  , 0x01  , 0x80000484  );  //
sendSDO(  0x604 , 0x2f  , 0x1A00  , 0x00  , 0x00000000  );  //
sendSDO(  0x604 , 0x2f  , 0x1A00  , 0x00  , 0x00000004  );  //
sendSDO(  0x604 , 0x2f  , 0x1A01  , 0x00  , 0x00000000  );  //
sendSDO(  0x604 , 0x2f  , 0x1A01  , 0x00  , 0x00000004  );  //
sendSDO(  0x604 , 0x2b  , 0x5010  , 0x01  , 0x00000005  );  //
sendSDO(  0x604 , 0x2b  , 0x5010  , 0x02  , 0x00000005  );  //
sendSDO(  0x604 , 0x2b  , 0x5010  , 0x03  , 0x00000005  );  //
sendSDO(  0x604 , 0x2b  , 0x5010  , 0x04  , 0x00000005  );  //
sendSDO(  0x604 , 0x2b  , 0x5011  , 0x01  , 0x00000005  );  //
sendSDO(  0x604 , 0x2b  , 0x5011  , 0x02  , 0x00000005  );  //
sendSDO(  0x604 , 0x2b  , 0x5011  , 0x03  , 0x00000005  );  //
sendSDO(  0x604 , 0x2b  , 0x5011  , 0x04  , 0x00000005  );  //
sendSDO(  0x604 , 0x2b  , 0x5012  , 0x01  , 0x00000FA0  );  //
sendSDO(  0x604 , 0x2b  , 0x5012  , 0x02  , 0x00000FA0  );  //
sendSDO(  0x604 , 0x2b  , 0x5012  , 0x03  , 0x00000FA0  );  //
sendSDO(  0x604 , 0x2b  , 0x5012  , 0x04  , 0x00000FA0  );  //
sendSDO(  0x604 , 0x2b  , 0x5013  , 0x01  , 0x00000FA0  );  //
sendSDO(  0x604 , 0x2b  , 0x5013  , 0x02  , 0x00000FA0  );  //
sendSDO(  0x604 , 0x2b  , 0x5013  , 0x03  , 0x00000FA0  );  //
sendSDO(  0x604 , 0x2b  , 0x5013  , 0x04  , 0x00000FA0  );  //
sendSDO(  0x604 , 0x2f  , 0x6423  , 0x00  , 0x00000001  );  //
sendSDO(  0x605 , 0x40  , 0x1000  , 0x00  , 0x00000000  );  //
sendSDO(  0x605 , 0x23  , 0x1005  , 0x00  , 0x80000080  );  //
sendSDO(  0x605 , 0x23  , 0x1014  , 0x00  , 0x80000085  );  //
sendSDO(  0x605 , 0x23  , 0x1014  , 0x00  , 0x00000085  );  //
sendSDO(  0x605 , 0x23  , 0x1400  , 0x01  , 0x80000205  );  //
sendSDO(  0x605 , 0x23  , 0x1400  , 0x01  , 0x00000205  );  //
sendSDO(  0x605 , 0x2f  , 0x1400  , 0x02  , 0x00000001  );  //
sendSDO(  0x605 , 0x23  , 0x1401  , 0x01  , 0x80000305  );  //
sendSDO(  0x605 , 0x23  , 0x1401  , 0x01  , 0x00000305  );  //
sendSDO(  0x605 , 0x2f  , 0x1401  , 0x02  , 0x00000001  );  //
sendSDO(  0x605 , 0x23  , 0x1402  , 0x01  , 0x80000405  );  //
sendSDO(  0x605 , 0x23  , 0x1403  , 0x01  , 0x80000505  );  //
sendSDO(  0x605 , 0x2f  , 0x1600  , 0x00  , 0x00000000  );  //
sendSDO(  0x605 , 0x2f  , 0x1600  , 0x00  , 0x00000004  );  //
sendSDO(  0x605 , 0x2f  , 0x1601  , 0x00  , 0x00000000  );  //
sendSDO(  0x605 , 0x2f  , 0x1601  , 0x00  , 0x00000004  );  //
sendSDO(  0x605 , 0x23  , 0x1800  , 0x01  , 0x80000185  );  //
sendSDO(  0x605 , 0x23  , 0x1800  , 0x01  , 0x00000185  );  //
sendSDO(  0x605 , 0x2f  , 0x1800  , 0x02  , 0x00000001  );  //
sendSDO(  0x605 , 0x23  , 0x1801  , 0x01  , 0x80000285  );  //
sendSDO(  0x605 , 0x23  , 0x1801  , 0x01  , 0x00000285  );  //
sendSDO(  0x605 , 0x2f  , 0x1801  , 0x02  , 0x00000001  );  //
sendSDO(  0x605 , 0x23  , 0x1802  , 0x01  , 0x80000385  );  //
sendSDO(  0x605 , 0x23  , 0x1803  , 0x01  , 0x80000485  );  //
sendSDO(  0x605 , 0x2f  , 0x1A00  , 0x00  , 0x00000000  );  //
sendSDO(  0x605 , 0x2f  , 0x1A00  , 0x00  , 0x00000004  );  //
sendSDO(  0x605 , 0x2f  , 0x1A01  , 0x00  , 0x00000000  );  //
sendSDO(  0x605 , 0x2f  , 0x1A01  , 0x00  , 0x00000004  );  //
sendSDO(  0x605 , 0x2b  , 0x5010  , 0x01  , 0x00000005  );  //
sendSDO(  0x605 , 0x2b  , 0x5010  , 0x02  , 0x00000005  );  //
sendSDO(  0x605 , 0x2b  , 0x5010  , 0x03  , 0x00000005  );  //
sendSDO(  0x605 , 0x2b  , 0x5010  , 0x04  , 0x00000005  );  //
sendSDO(  0x605 , 0x2b  , 0x5011  , 0x01  , 0x00000033  );  //
sendSDO(  0x605 , 0x2b  , 0x5011  , 0x02  , 0x00000033  );  //
sendSDO(  0x605 , 0x2b  , 0x5011  , 0x03  , 0x00000033  );  //
sendSDO(  0x605 , 0x2b  , 0x5011  , 0x04  , 0x00000033  );  //
sendSDO(  0x605 , 0x2b  , 0x5012  , 0x01  , 0x00000FA0  );  //
sendSDO(  0x605 , 0x2b  , 0x5012  , 0x02  , 0x00000FA0  );  //
sendSDO(  0x605 , 0x2b  , 0x5012  , 0x03  , 0x00000FA0  );  //
sendSDO(  0x605 , 0x2b  , 0x5012  , 0x04  , 0x00000FA0  );  //
sendSDO(  0x605 , 0x2b  , 0x5013  , 0x01  , 0x00000FA0  );  //
sendSDO(  0x605 , 0x2b  , 0x5013  , 0x02  , 0x00000FA0  );  //
sendSDO(  0x605 , 0x2b  , 0x5013  , 0x03  , 0x00000FA0  );  //
sendSDO(  0x605 , 0x2b  , 0x5013  , 0x04  , 0x00000FA0  );  //
sendSDO(  0x605 , 0x2f  , 0x6423  , 0x00  , 0x00000001  );  //

 * 
 */
}

void CDHD_Drive::motorInit()
{
  //  SDO Motordaten        Bsp DSD2-056LO64U an Controller mit ID = 2
  //       CAN-ID    COB   index   sub index   data      Motorwert Einheit Umrechnungsfaktor Bedeutung
  sendSDO(0x602, 0x22, 0x6075, 0x00, 0x00004268);              //  17,00 A *1000 nominaler Strom
  sendSDO(0x602, 0x22, 0x2036, 0x00, 0x000055F0);              //  22,00 A *1000 Spitzenstrom
  sendSDO(0x602, 0x22, 0x6076, 0x00, 0x000036b0);              //  14,00 Nm  *1000 dauerhaftes Drehmoment
  sendSDO(0x602, 0x22, 0x6080, 0x00, 6000 * const_scale_velo); //  3200,00 rpm 0x019015E0 / 8192 maximale Drehzahl (wahrscheinlich willkürlich gewählt, normalerweise Angabe direkt in rpm)
  sendSDO(0x602, 0x22, 0x607F, 0x00, 5500 * const_scale_velo); // user velocity limit

  sendSDO(0x602, 0x22, 0x60C5, 0x00, 5000 * const_scale_velo); //
  sendSDO(0x602, 0x22, 0x60C6, 0x00, 5000 * const_scale_velo); //

  sendSDO(0x602, 0x22, 0x6083, 0x00, 500 * const_scale_velo); //
  sendSDO(0x602, 0x22, 0x6084, 0x00, 500 * const_scale_velo); //

  //fail
  //sendSDO(  0x602 , 0x23  , 0x2031  , 0x00  , 0x41C00000  );  //  24,00 ms  *1  Foldback Recovery Time (Angabe normalerweise direkt in ms)
  sendSDO(0x602, 0x23, 0x203A, 0x00, 0x40800000); //  4,0 H H Angabe als "real" (float) Induktivität
  sendSDO(0x602, 0x23, 0x207F, 0x00, 0x3EF5C28F); //  0,48  Ω Angabe als "real" (float) Wicklungswiderstand
  sendSDO(0x602, 0x23, 0x2027, 0x00, 0x40C00000); //  6,00    Angabe als "real" (float) velocity proportional gain
  sendSDO(0x602, 0x23, 0x2026, 0x00, 0x42700000); //  60,00 Hz  Angabe als "real" (float) velocity integral gain
  sendSDO(0x602, 0x23, 0x2022, 0x00, 0x43C80000); //  400,00    Angabe als "real" (float) position proportional gain
  sendSDO(0x602, 0x23, 0x202F, 0x00, 0x42100000); //  36,00 s Angabe als "real" (float) foldback delay time
  sendSDO(0x602, 0x23, 0x2032, 0x00, 0x40C00000); //  6,00  s   foldback time constant
  sendSDO(0x602, 0x2b, 0x2030, 0x00, 0x00000000); //
  sendSDO(0x602, 0x2F, 0x2002, 0x00, 0x00000001); //        Konfigurationssequenz
  //fail

  sendSDO(0x602, 0x2B, 0x6073, 0x00, 0x00002000); //  20 A
}
